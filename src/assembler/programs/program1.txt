ldh 11
mov 8
ldl 7
ldb 0
ldh 11
mov 9
ldl 8
ldb 0
ldh 0
mov 0
ldh 2
mov 1
ldh 1
mov 0
ldh 4
mov 0
ldh 3
mov 0
ldh 6
mov 0
ldh 5
mov 1
ldh 9
mov 7
ldh 5
ldl 9
lsl 5
ldh 9       # (WC1)
mov 16
ldh 0
ldl 9
slt 10
ldh 0
ldl 6
jmp 10      # to (WC2_L) = +6
ldh 10
mov 1
ldh 7
ldl 4
jmp 10      # to (DONE) = +116
ldh 9       # (WC2_L)
mov 0
ldl 2
slt 10
ldh 0
ldl 13
jmp 10      # to (WIF_HI) = +13
ldh 9       # (WC2_H)
mov 0
ldl 1
slt 10
ldh 0
ldl 6
jmp 10      # to (WIF_HI) = +6
ldh 10
mov 1
ldh 6
ldl 1
jmp 10      # to (DONE) = +97
ldh 7       # (WIF_HI)
ldl 1
slt 10
ldh 1
ldl 3 
jmp 10      # to (IF) = +19
ldh 1
ldl 7
slt 10
ldh 3
ldl 3
jmp 10      # to (ELSE) = +51
ldh 8       # (WIF_LO)
ldl 2
slt 10
ldh 0
ldl 7
jmp 10      # to (IF) = +7
ldh 2
ldl 8
slt 10
ldh 2
ldl 7
jmp 10      # to (ELSE) = +39
ldh 10      # (IF) 
mov 3       # store 255 in r9 by shifting 31 and adding 7
ldh 9 
mov 31
ldl 10
lsl 9
ldh 10
mov 7
ldl 9
add 9       # r9 now stores 255
ldh 9
ldl 8
xor 10
ldh 11
mov 1
ldl 10
add 10      # r10 now stores 2's comp of -dvr_lo
ldh 9
ldl 7
xor 11
ldh 12
ldl 11
add 11      # r11 now stores 2's comp of -dvr_hi + the overflow from dvr_lo
ldh 2
ldl 10
add 2       # rem_lo = rem_lo - dvr_lo
ldh 1
ldl 12      # rem_hi = rem_hi + overflow from dvr_lo
add 1       
ldh 1
ldl 11      # rem_hi = rem_lo - dvr_hi
add 1
ldh 3
ldl 5
lor 3
ldh 4
ldl 6
lor 4
ldh 9       # (ELSE)
mov 1       # store 1 in r9
ldh 11      # zero out r11
mov 0
ldh 2
ldl 9
lsl 2       # rem_lo = rem_lo << 1
ldh 11
ldl 12      # store overflow bit in r11
add 11
ldh 1
ldl 9
lsl 1       # rem_hi = rem_hi << 1
ldl 11      # add previous overflow to rem_hi
add 1
ldh 11      # zero out r11
mov 0
ldh 5
ldl 9
lsr 5       # bit_hi = bit_hi >> 1
ldh 11
ldl 12
add 11      # store overflow bit in r11
ldh 6
ldl 9
lsr 6
ldl 11
add 6
ldh 0
ldl 9
add 0
ldh 15
ldl 15
jmp 9       # to (WC1) = -127
ldh 10      # (DONE)
mov 10
ldh 3
ldl 10
str 0
ldh 10
mov 11
ldh 4
ldl 10
str 0
hlt
