ldh 0	#r0 = 0
mov 0
ldh 5
mov 4
ldh 1
mov 4
ldl 5
lsl 1   #r1 = msb bit
ldh 2   
mov 0   #r2 = lsb bit
ldh 5
mov 15
ldl 3
ldb 1   #r3 = msb num
ldl 4
ldb 2   #r4 = lsb num
ldh 6
mov 0   #r6 = 0
ldh 14	#r14 = 1 for jumps
mov 1
ldh 15  #r15 = 0x40  
mov 0
ldl 1
add 15
ldh 3 #while1 num < bit
ldl 1
slt 5 
ldh 1
ldl 6 
jmp 5 #to body1 if num[15:8] < bit[15:8] 
ldh 1
ldl 3
slt 5  
ldh 3
ldl 5
jmp 5 #to while2 if num[15:8] > bit[15:8]
ldh 2
ldl 4
slt 5 
ldh 2
ldl 15
jmp 5 #to while2 if bit[7:0] < num[7:0]
ldh 4
ldl 2
slt 5
ldh 0
ldl 4
jmp 5 #to body1 if num[7:0] < bit[7:0]
ldh 2
ldl 6
jmp 14 #to while2
ldh 10 #body1
mov 2  #r10 = 2
ldh 10
ldl 1
slt 5
ldh 0
ldl 14
jmp 5  #if top bits of bit > 2 jump shift1 
ldh 1
ldl 3
jmp 6  #init r2 once to 0x40 then always jump shift2
ldh 2
ldl 15
add 2
ldh 6
mov 1
ldh 1
mov 0
ldh 10
ldl 15
jmp 14 #always jump to while1
ldh 10 #shift 1
mov 2
ldh 1
ldl 10
lsr 1
ldh 11
ldl 7
jmp 14 #to while1
ldh 10 #shift2
mov 2
ldh 2
ldl 10
lsr 2
ldh 11
ldl 15
jmp 14 #to while1
hlt    
