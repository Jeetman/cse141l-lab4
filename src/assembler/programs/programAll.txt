ldh 11
mov 8
ldl 7
ldb 0
ldh 11
mov 9
ldl 8
ldb 0
ldh 0
mov 0
ldh 2
mov 1
ldh 1
mov 0
ldh 4
mov 0
ldh 3
mov 0
ldh 6
mov 0
ldh 5
mov 1
ldh 9
mov 7
ldh 5
ldl 9
lsl 5
ldh 9       # (WC1)
mov 16
ldh 0
ldl 9
slt 10
ldh 0
ldl 6
jmp 10      # to (WC2_L) = +6
ldh 10
mov 1
ldh 7
ldl 4
jmp 10      # to (DONE) = +116
ldh 9       # (WC2_L)
mov 0
ldl 2
slt 10
ldh 0
ldl 13
jmp 10      # to (WIF_HI) = +13
ldh 9       # (WC2_H)
mov 0
ldl 1
slt 10
ldh 0
ldl 6
jmp 10      # to (WIF_HI) = +6
ldh 10
mov 1
ldh 6
ldl 1
jmp 10      # to (DONE) = +97
ldh 7       # (WIF_HI)
ldl 1
slt 10
ldh 1
ldl 3 
jmp 10      # to (IF) = +19
ldh 1
ldl 7
slt 10
ldh 3
ldl 3
jmp 10      # to (ELSE) = +51
ldh 8       # (WIF_LO)
ldl 2
slt 10
ldh 0
ldl 7
jmp 10      # to (IF) = +7
ldh 2
ldl 8
slt 10
ldh 2
ldl 7
jmp 10      # to (ELSE) = +39
ldh 10      # (IF) 
mov 3       # store 255 in r9 by shifting 31 and adding 7
ldh 9 
mov 31
ldl 10
lsl 9
ldh 10
mov 7
ldl 9
add 9       # r9 now stores 255
ldh 9
ldl 8
xor 10
ldh 11
mov 1
ldl 10
add 10      # r10 now stores 2's comp of -dvr_lo
ldh 9
ldl 7
xor 11
ldh 12
ldl 11
add 11      # r11 now stores 2's comp of -dvr_hi + the overflow from dvr_lo
ldh 2
ldl 10
add 2       # rem_lo = rem_lo - dvr_lo
ldh 1
ldl 12      # rem_hi = rem_hi + overflow from dvr_lo
add 1       
ldh 1
ldl 11      # rem_hi = rem_lo - dvr_hi
add 1
ldh 3
ldl 5
lor 3
ldh 4
ldl 6
lor 4
ldh 9       # (ELSE)
mov 1       # store 1 in r9
ldh 11      # zero out r11
mov 0
ldh 2
ldl 9
lsl 2       # rem_lo = rem_lo << 1
ldh 11
ldl 12      # store overflow bit in r11
add 11
ldh 1
ldl 9
lsl 1       # rem_hi = rem_hi << 1
ldl 11      # add previous overflow to rem_hi
add 1
ldh 11      # zero out r11
mov 0
ldh 5
ldl 9
lsr 5       # bit_hi = bit_hi >> 1
ldh 11
ldl 12
add 11      # store overflow bit in r11
ldh 6
ldl 9
lsr 6
ldl 11
add 6
ldh 0
ldl 9
add 0
ldh 15
ldl 15
jmp 9       # to (WC1) = -127
ldh 10      # (DONE)
mov 10
ldh 3
ldl 10
str 0
ldh 10
mov 11
ldh 4
ldl 10
str 0
hlt
ldh 0	  	#r0 = 0 --> counting to 8
mov 0
ldh 1 		#r1 = 0 --> counting to 3
mov 0
ldh 4		  #r4 = 0 --> keep shifted dividend
mov 0
ldh 5	  	#r5 = 0 --> keep current quotient
mov 0 
ldh 7 		#r7 = 8 --> count dwn from 8
mov 8
ldh 9		  #r9 = 2
mov 2
ldl 2	  	#r2 = MEM[$r9] --> $r2 keeps divisor
ldb 0
ldl 6 		#r6 = 2s comp of divisor
ldb 0
ldh 14
mov 31    #r14 = 0b0001_1111
ldh 9
mov 3
ldh 10
mov 7
ldh 14
ldl 9
lsl 14
ldh 14
ldl 10
add 14    #r14 = 0b1111_1111
ldh 6
ldl 14
xor 6
ldh 8     #r8 = 1 to add to finish 2s comp
mov 1
ldl 6
add 6
ldh 10		#r10 = 0                           QL1
mov 0
ldl 3		  #r3 = MEM[$r10] = MSB of dividend
ldb 0
ldh 15		#r15 = 1
mov 1
ldh 0    	#always jump to DIV_LOOP
ldl 12
jmp 15
ldh 10		#r10 = 1                           Ql2
mov 1
ldl 3		  #r3 = MEM[$r10] = LSB of dividend
ldb 0
ldh 15		#r15 = 1
mov 1
ldh 0   	#always jump to DIV_LOOP
ldl 3
jmp 15
ldh 3 		#r3 = 0                             QL3
mov 0
ldh 8		  #shift shifted dividend left 1      DIV_LOOP
mov 1
ldh 4
ldl 8
lsl 4
ldh 8     #store overflowed (0 or 1) in $r11
mov 0
ldh 8
ldl 12
add 11
ldh 14		#r7 -= $r7
ldl 7
add 7
ldh 3	  	#get dividend's next bit, put in $r8
ldl 7
lsr 8
ldh 9
mov 1
ldh 8
ldl 9
and 8
ldh 8	  	#add next bit to shifted dividend $r4
ldl 4
add 4
ldh 8	  	#shift current quotient left 1, $r5
mov 1
ldh 5
ldl 8
lsl 5
ldh 9     #jump to SUB if $r11 set
mov 0
ldh 9
ldl 11
slt 15
ldh 0
ldl 7
jmp 15
ldh 4	  	#jump to END_DIV_LP if no sub
ldl 2
slt 15
ldh 0
ldl 9
jmp 15
ldh 8	  	#put 1 in current quotient                  SUB
mov 1
ldh 5
ldl 8
add 5
ldh 4	  	#r4 = shifted dividend - divisor
ldl 6
add 4
ldh 8	  	#r0 += 1, inc 8ctr and loop if necessary    END_DIV_LP
mov 1
ldh 8
ldl 0
add 0
ldh 8	  	#if 8ct < 8 do DIV_LOOP again
mov 8
ldh 0
ldl 8
slt 15
ldh 11
ldl 15
jmp 15
ldh 8	  	#goto STORE_Q1
mov 1
ldh 1
ldl 8
slt 15
ldh 1
ldl 1
jmp 15
ldh 8 		#goto STORE_Q2
mov 2
ldh 1
ldl 8
slt 15
ldh 1
ldl 12
jmp 15
ldh 8 		#goto STORE_Q3
mov 3
ldh 1
ldl 8
slt 15
ldh 2
ldl 7
jmp 15
ldh 8 		#store first quotient val              STORE_Q1
mov 4
ldh 5
ldl 8
str 0
ldh 8	  	#inc 3ctr
mov 1
ldh 1
ldl 8
add 1
ldh 7     #r7 = 8, to count down again
mov 8
ldh 0     #r0 = 0, rst to loop
mov 0
ldh 15		#jump to get second quotient val,      QL2
mov 1
ldh 15
ldl 5
jmp 15
ldh 8 		#store second quotient val             STORE_Q2
mov 5
ldh 5
ldl 8
str 0
ldh 8	  	#inc 3ctr
mov 1
ldh 1
ldl 8
add 1
ldh 7     #r7 = 8, to count down again
mov 8
ldh 0     #r0 = 0, rst to loop
mov 0
ldh 15		#jump to get third quotient val,       QL3
mov 1
ldh 15
ldl 15
jmp 15
ldh 8	  	#store third quotient val and end      STORE_Q3
mov 6
ldh 5
ldl 8
str 0
hlt
ldh 0	#r0 = 0
mov 0
ldh 11  #r11 = 0
mov 0
ldh 5
mov 4
ldh 1
mov 4
ldl 5
lsl 1   #r1 = msb bit
ldh 2   
mov 0   #r2 = lsb bit
ldh 5
mov 15
ldl 3
ldb 1   #r3 = msb num
ldl 4
ldb 2   #r4 = lsb num
ldh 6
mov 0   #r6 = 0
ldh 14	#r14 = 1 for jumps
mov 1
ldh 15  #r15 = 0x40  
mov 0
ldl 1
add 15
ldh 3 #while1 num < bit
ldl 1
slt 5 
ldh 1
ldl 6 
jmp 5 #to body1 if num[15:8] < bit[15:8] 
ldh 1
ldl 3
slt 5  
ldh 3
ldl 11
jmp 5 #to while2 if num[15:8] > bit[15:8]
ldh 2
ldl 4
slt 5 
ldh 3
ldl 5
jmp 5 #to while2 if bit[7:0] < num[7:0]
ldh 4
ldl 2
slt 5
ldh 0
ldl 4
jmp 5 #to body1 if num[7:0] < bit[7:0]
ldh 2
ldl 12
jmp 14 #to while2
ldh 10 #body1
mov 2  #r10 = 2
ldh 10
ldl 1
slt 5
ldh 0
ldl 14
jmp 5  #if top bits of bit > 2 jump shift1 
ldh 1
ldl 3
jmp 6  #init r2 once to 0x40 then always jump shift2
ldh 2
ldl 15
add 2
ldh 6
mov 1
ldh 1
mov 0
ldh 10
ldl 15
jmp 14 #always jump to while1
ldh 10 #shift 1
mov 2
ldh 1
ldl 10
lsr 1
ldh 11
ldl 7
jmp 14 #to while1
ldh 10 #shift2
mov 2
ldh 2
ldl 10
lsr 2
ldh 11
ldl 15
jmp 14 #to while1
ldh 1  #done
mov 15
ldh 0
ldl 1
str 3
hlt
ldh 0  #while2
ldl 7
jmp 1 #jump to body2 if top bits are non-zero 
ldh 0
ldl 4
jmp 2 #jump to body2 if bottom bits are non-zero
ldh 8
ldl 14
jmp 14 #jump to done
ldh 0  #body2
ldl 2  
add 9 
ldh 1 
ldl 12
add 8  
ldh 8  
ldl 11
add 8  #tmp = ret + bit
ldh 8  #if
ldl 3
slt 5
ldh 1
ldl 15
jmp 5  #if num[15:8] > tmp[15:8] jmp to else
ldh 3
ldl 8
slt 5
ldh 0
ldl 10
jmp 5 #if tmp[15:8] > num[15:8] jmp to body3
ldh 4
ldl 9
slt 5
ldh 0
ldl 4
jmp 5 #if num[7:0] < tmp[7:0] jmp to body3
ldh 1
ldl 0
jmp 14 #to else
ldh 11 #body3
ldl 14
lsr 11
ldh 5
mov 0
ldl 12
add 5  
ldh 0
ldl 14
lsr 0
ldl 5
add 0 #ret >> 1
ldh 4
ldl 5
jmp 14 #to always
ldh 5 #else
mov 3
ldh 10 
mov 31
ldl 5
lsl 10
ldh 5
mov 7
ldl 10
add 10 #r10 = 0xFF
ldh 8
ldl 10
xor 5  #r5 = upper bits of tmp flipped
ldh 9
xor 7  #r7 = lower bits of tmp flipped
ldh 7
ldl 14
add 7  #r7 += 1
ldh 5
ldl 12
add 5  #add overflow to upper bits
ldh 4
ldl 7
add 4
ldh 3
ldl 12
add 3
ldl 5
add 3  #num -= tmp
ldh 11
ldl 14
lsr 11 
ldh 5
mov 0
ldl 12
add 5
ldh 0
ldl 14
lsr 0
ldl 5
add 0  
ldl 2
add 0 #ret >> 1 
ldh 11
ldl 12
add 11
ldh 11
ldl 1
add 11 # ret = ret + bit
ldh 1
ldl 1
jmp 14 #to always
ldh 10 #shift3
mov 2
ldh 1
ldl 10
lsr 1  # bit >> 2
ldh 15
ldl 1
jmp 14 #to while2
ldh 10 #shift4
mov 2
ldh 2
ldl 10
lsr 2
ldh 15
ldl 9
jmp 14 #to while2
ldh 10 #always
mov 2
ldl 1
slt 5
ldh 9
ldl 6
jmp 5  #to shitf3
ldh 9
ldl 1
jmp 6  #to shift4
ldh 2
ldl 15
add 2  #init r2 to 0x40
ldh 6
mov 1
ldh 1
mov 0
ldh 9
ldl 6
jmp 14 #to while2
