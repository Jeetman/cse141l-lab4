ldh 0	  	#r0 = 0 --> counting to 8
mov 0
ldh 1 		#r1 = 0 --> counting to 3
mov 0
ldh 4		  #r4 = 0 --> keep shifted dividend
mov 0
ldh 5	  	#r5 = 0 --> keep current quotient
mov 0 
ldh 7 		#r7 = 8 --> count dwn from 8
mov 8
ldh 9		  #r9 = 2
mov 2
ldl 2	  	#r2 = MEM[$r9] --> $r2 keeps divisor
ldb 0
ldl 6 		#r6 = 2s comp of divisor
ldb 0
ldh 14
mov 31    #r14 = 0b0001_1111
ldh 9
mov 3
ldh 10
mov 7
ldh 14
ldl 9
lsl 14
ldh 14
ldl 10
add 14    #r14 = 0b1111_1111
ldh 6
ldl 14
xor 6
ldh 8     #r8 = 1 to add to finish 2s comp
mov 1
ldl 6
add 6
ldh 10		#r10 = 0                           QL1
mov 0
ldl 3		  #r3 = MEM[$r10] = MSB of dividend
ldb 0
ldh 15		#r15 = 1
mov 1
ldh 0    	#always jump to DIV_LOOP
ldl 12
jmp 15
ldh 10		#r10 = 1                           Ql2
mov 1
ldl 3		  #r3 = MEM[$r10] = LSB of dividend
ldb 0
ldh 15		#r15 = 1
mov 1
ldh 0   	#always jump to DIV_LOOP
ldl 3
jmp 15
ldh 3 		#r3 = 0                             QL3
mov 0
ldh 8		  #shift shifted dividend left 1      DIV_LOOP
mov 1
ldh 4
ldl 8
lsl 4
ldh 14		#r7 -= $r7
ldl 7
add 7
ldh 3	  	#get dividend's next bit, put in $r8
ldl 7
lsr 8
ldh 9
mov 1
ldh 8
ldl 9
and 8
ldh 8	  	#add next bit to shifted dividend $r4
ldl 4
add 4
ldh 8	  	#shift current quotient left 1, $r5
mov 1
ldh 5
ldl 8
lsl 5
ldh 4	  	#jump to END_DIV_LP if no sub
ldl 2
slt 15
ldh 0
ldl 9
jmp 15
ldh 8	  	#put 1 in current quotient                  SUB
mov 1
ldh 5
ldl 8
add 5
ldh 4	  	#r4 = shifted dividend - divisor
ldl 6
add 4
ldh 8	  	#r0 += 1, inc 8ctr and loop if necessary    END_DIV_LP
mov 1
ldh 8
ldl 0
add 0
ldh 8	  	#if 8ct < 8 do DIV_LOOP again
mov 8
ldh 0
ldl 8
slt 15
ldh 11
ldl 2
jmp 15
ldh 8	  	#goto STORE_Q1
mov 1
ldh 1
ldl 8
slt 15
ldh 1
ldl 1
jmp 15
ldh 8 		#goto STORE_Q2
mov 2
ldh 1
ldl 8
slt 15
ldh 1
ldl 12
jmp 15
ldh 8 		#goto STORE_Q3
mov 3
ldh 1
ldl 8
slt 15
ldh 2
ldl 7
jmp 15
ldh 8 		#store first quotient val              STORE_Q1
mov 4
ldh 5
ldl 8
str 0
ldh 8	  	#inc 3ctr
mov 1
ldh 1
ldl 8
add 1
ldh 7     #r7 = 8, to count down again
mov 8
ldh 0     #r0 = 0, rst to loop
mov 0
ldh 15		#jump to get second quotient val,      QL2
mov 1
ldh 14
ldl 8
jmp 15
ldh 8 		#store second quotient val             STORE_Q2
mov 5
ldh 5
ldl 8
str 0
ldh 8	  	#inc 3ctr
mov 1
ldh 1
ldl 8
add 1
ldh 7     #r7 = 8, to count down again
mov 8
ldh 0     #r0 = 0, rst to loop
mov 0
ldh 15		#jump to get third quotient val,       QL3
mov 1
ldh 15
ldl 2
jmp 15
ldh 8	  	#store third quotient val and end      STORE_Q3
mov 6
ldh 5
ldl 8
str 0
hlt
