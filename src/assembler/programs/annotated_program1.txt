# program inverse
# r0: cnt
# r1: rem[15:8]
# r2: rem[7:0]
# r3: ret[15:8]
# r4: ret[7:0]
# r5: bit[15:8]
# r6: bit[7:0]
# r7: dvr[15:8]
# r8: dvr[7:0]
# r9-r11: temporary

# load dvr_hi
ldh 11
mov 8
ldl 7
ldb 0

# load dvr_lo
ldh 11
mov 9
ldl 8
ldb 0

# cnt = 0;
ldh 0
mov 0

# rem_lo = 1;
# rem_hi = 0;
ldh 2
mov 1
ldh 1
mov 0

# ret_lo = 0;
# ret_hi = 0;
ldh 4
mov 0
ldh 3
mov 0

# bit_hi = 8;
# bit_lo = 0;
ldh 6
mov 0
ldh 5
mov 1
ldh 9
mov 7
ldh 5
ldl 9
lsl 5

# (WC1)
# if (cnt < 16)
#   goto WC2_L
ldh 9
mov 16
ldh 0
ldl 9
slt 10
ldh
ldl
jmp 10 (WC2_L)

# goto DONE
ldh 10
mov 1
ldh
ldl
jmp 10 (DONE)

# (WC2_L)
# if (rem_lo > 0)
#   goto WHILE
ldh 9
mov 0
ldl 2
slt 10
ldh
ldl
jmp 10 (WHILE)

# (WC2_H)
# if (rem_hi > 0)
#   goto WHILE
ldh 9
mov 0
ldl 3
slt 10
ldh
ldl
jmp 10 (WHILE)

# goto DONE
ldh 10
mov 1
ldh
ldl
jmp 10 (DONE)

# (WHILE)

# (WIF_HI)
# if (rem_hi > dvr_hi)
#   goto IF
ldh 7
ldl 1
slt 10
ldh
ldl
jmp 10 (IF)

# if (rem_hi < dvr_hi)
#   goto ELSE
ldh 1
ldl 7
slt 10
ldh
ldl
jmp 10 (ELSE)

# (WIF_LO)
# if (rem_lo > dvr_lo)
#   goto IF
ldh 8
ldl 2
slt 10
ldh
ldl
jmp 10 (IF)

# if (rem_lo < dvr_lo)
#   goto ELSE
ldh 2
ldl 8
slt 10
ldh
ldl
jmp 10 (ELSE)

# (IF)
ldh 10      # store 255 in r9 by shifting 31 and adding 7
mov 3
ldh 9 
mov 31
ldl 10
lsl 9
ldh 10
mov 7
ldl 9
add 9       # r9 now stores 255

# r10 = 255 ^ dvr_lo
# dvr_lo = dvr_lo + 1
ldh 9
ldl 8
xor 10
mov 1
add 10

# r11 = 255 ^ dvr_hi
# r11 += overflow from dvr_lo
ldh 9
ldl 7
xor 11
ldh 12
ldl 11
add 11

# rem_lo = rem_lo + dvr_lo
ldh 2
ldl 8
add 2

# rem_hi = rem_hi + dvr_hi
# rem_hi += overflow from dvr_lo
ldh 1
ldl 7
add 1
ldh 1
ldl 12
add 1

# ret_hi = ret_hi | bit_hi;
ldh 3
ldl 5
lor 3

# ret_lo = ret_lo | bit_lo;
ldh 4
ldl 6
lor 4

#(ELSE)
# rem_lo = rem_lo << 1;
ldh 9
mov 1
ldh 2
ldl 9
lsl 2

# rem_hi = rem_hi << 1;
ldh 1
lsl 1

# rem_hi += overflow;
ldl 12
add 1

# bit_hi = bit_hi >> 1;
ldh 9
mov 1
ldh 5
ldl 9
lsr 5

# bit_lo = bit_lo >> 1;
ldh 6
lsr 6

# bit_lo += overflow;
ldl 12
add 6

# cnt = cnt + 1;
ldh 0
ldl 9
add 0

# goto WC1
ldh
ldl
jmp 9 (WC1)

#(DONE)
# store ret;
ldh 10
mov 10
ldh 3
ldl 10
str 0
ldh 10
mov 11
ldh 4
ldl 10
str 0
hlt
